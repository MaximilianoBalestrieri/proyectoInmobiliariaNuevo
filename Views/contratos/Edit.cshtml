@model proyectoInmobiliariaNuevo.Models.Contrato
@using System.Text.Json


 @{
    ViewBag.Title = "Editar Contrato";
     string pagado = ViewBag.Usuario as string;
     Layout = "~/Views/Shared/_Layout.cshtml";
 }

 <head>
    <style>

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        th {
            text-align: center;
            background-color: #d4edda; /* verde claro SIEMPRE */
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
            user-select: none;
        }

            /* Efecto hover */
            th:hover {
                background-color: #c3e6cb;
                text-decoration: underline;
            }

            /* Tooltip */
            th::after {
                content: "Ordenar";
                position: absolute;
                bottom: -1.5em;
                left: 50%;
                transform: translateX(-50%);
                background-color: #28a745;
                color: white;
                padding: 2px 8px;
                font-size: 12px;
                border-radius: 5px;
                opacity: 0;
                pointer-events: none;
                transition: opacity 0.3s ease;
                white-space: nowrap;
            }

            th:hover::after {
                opacity: 1;
            }

        /* Flechitas */
        .th-orden-asc::before {
            content: "↑ ";
        }

        .th-orden-desc::before {
            content: "↓ ";
        }


       .fixed-right {
    position: fixed;
    top: 57px;
    right: -40px; /* Más cerca del margen derecho */
    width: 750px; /* Más ancho para que los botones no se solapen */
    height: 460px;
    padding: 15px;
}


        .card {
            height: 100%;
        }

        .card-header {
            background-color: #f8f9fa;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .card-body {
            padding: 10px;
            overflow-y: auto;
        }

        table {
            width: 100%;
            margin-top: 20px;
        }

        .card-body form .mb-3 {
            margin-bottom: 8px; /* antes eran 16px */
        }

        .card-body form input,
        .card-body form select {
            padding: 4px 8px;
            font-size: 0.9rem;
        }

        .small-form * {
            font-size: 0.75rem !important;
        }

        #formularioPagos {
            font-size: 11px !important;
        }

            #formularioPagos .form-control,
            #formularioPagos .form-label,
            #formularioPagos select,
            #formularioPagos button {
                font-size: 0.65rem !important;
                padding: 2px 6px !important;
                height: auto !important;
                line-height: 1.2 !important;
            }

        .fixed-right table,
        .fixed-right th,
        .fixed-right td {
            font-size: 0.75rem; /* Esto achica la letra */
        }

        .table th,
        .table td {
            font-size: 12px !important;
            padding-top: 4px !important;
            padding-bottom: 4px !important;
        }

       

    </style>

 </head>
 <body>

 @using (Html.BeginForm("Edit", "Contratos", new { id = Model.IdContrato }, FormMethod.Post))
 {
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.IdContrato)

    <div class="row align-items-center mb-3">
        <div class="col-auto">
            <h2>Editar Contrato</h2>
             <p>Usuario Logueado: @ViewBag.NombreyApellido</p> 
        </div>
                   

        <div class="col-auto">
            <button type="button" class="btn btn-primary btn-sm btn-renovar"
                    onclick="abrirModalRenovacion(this)"
                    data-id-contrato="@Model.IdContrato"
                    data-id-inmueble="@Model.IdInmueble"
                    data-direccion="@Model.Direccion"
                    data-dni-propietario="@Model.DniPropietario"
                    data-nombre-propietario="@Model.NombrePropietario"
                    data-dni-inquilino="@Model.DniInquilino"
                    data-nombre-inquilino="@Model.NombreInquilino"
                    data-fecha-inicio="@Model.FechaInicio.ToString("yyyy-MM-dd")"
                    data-fecha-final="@Model.FechaFinal.ToString("yyyy-MM-dd")"
                    data-monto="@Model.Monto">
                Renovación
            </button>
        </div>
    </div>

    <div class="form-horizontal">
        <hr />
        <!-- Propietario -->
        <div class="row align-items-end mb-3 g-2">
            <div class="col-auto">
                <label class="form-label">DNI Propietario</label>
                @Html.TextBoxFor(model => model.DniPropietario, new
                {
                    @class = "form-control form-control-sm",
                    style = "width: 150px;",
                    id = "dniPropietarioInput",
                    @readonly = "readonly"
                })
            </div>
            <div class="col-auto">
                <label class="form-label">Nombre Propietario</label>
                @Html.TextBoxFor(model => model.NombrePropietario, new
                {
                    @class = "form-control form-control-sm",
                    style = "width: 300px;",
                    id = "nombrePropietarioInput",
                    @readonly = "readonly"
                })
            </div>
        </div>

        <!-- Inquilino -->
        <div class="row align-items-end mb-3 g-2">
            <div class="col-auto">
                <label class="form-label">DNI Inquilino</label>
                @Html.TextBoxFor(model => model.DniInquilino, new
                {
                    @class = "form-control form-control-sm",
                    style = "width: 150px;",
                    type = "number",
                    id = "dniInquilinoInput"
                })
            </div>
            <div class="col-auto">
                <label class="form-label">Nombre Inquilino</label>
                @Html.TextBoxFor(model => model.NombreInquilino, new
                {
                    @class = "form-control form-control-sm",
                    style = "width: 300px;",
                    @readonly = "readonly"
                })
            </div>
        </div>

        <!-- Dirección -->
        @Html.HiddenFor(model => model.IdInmueble)
        <div class="row align-items-end mb-3">
            <div class="col-md-8">
                <label class="form-label">Dirección</label>
                @Html.TextBoxFor(model => model.Direccion, new
                {
                    @class = "form-control form-control-sm",
                    id = "direccion",
                    @readonly = "readonly"
                })
            </div>
        </div>

        <!-- Fecha Inicio, Fecha Final, Monto, Vigente -->
        <div class="row mb-3 g-2">
            <div class="col-auto d-flex flex-column">
                <label class="form-label">Fecha Inicio</label>
                @Html.TextBoxFor(model => model.FechaInicio, "{0:yyyy-MM-dd}", new
                {
                    @class = "form-control form-control-sm",
                    type = "date",
                    style = "width: 150px;"
                })
            </div>
            <div class="col-auto d-flex flex-column">
                <label class="form-label">Fecha Final</label>
                @Html.TextBoxFor(model => model.FechaFinal, "{0:yyyy-MM-dd}", new
                {
                    @class = "form-control form-control-sm",
                    type = "date",
                    style = "width: 150px;"
                })
            </div>
            <div class="col-auto d-flex flex-column">
                <label class="form-label">Monto</label>
                @Html.TextBoxFor(model => model.Monto, new
                {
                    @class = "form-control form-control-sm",
                    type = "number",
                    step = "0.01",
                    style = "width: 100px;"
                })
            </div>
            <div class="d-none">
                @Html.CheckBoxFor(model => model.Vigente)
            </div>
        </div>

        <!-- Botones Guardar y Cancelar del Editar  -->
        <div class="d-flex justify-content-end mt-4" style="margin-right: 800px;">
            <input type="submit" value="Guardar Cambios" class="btn btn-success me-2" />
            <button class="btn btn-secondary" onclick="window.location.href='@Url.Action("Index")'">Cancelar</button>
        <!-- 
            @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-secondary" }) 
              -->
        </div>
    </div>

<!-- muestra Datos no se usas   -->
<!-- <div style="border: 1px solid black; padding: 10px;">
    <h3>Datos del contrato:</h3>
    <p>IdContrato: @Model.IdContrato</p>
    <p>Fecha Inicio: @Model.FechaInicio</p>
    <p>Fecha Final: @Model.FechaFinal</p>
    <p>Monto: @Model.Monto</p>
    <p>DNI Propietario: @Model.DniPropietario</p>
    <p>Nombre Propietario: @Model.NombrePropietario</p>
    <p>DNI Inquilino: @Model.DniInquilino</p>
    <p>Nombre Inquilino: @Model.NombreInquilino</p>
</div>    
        -->

@if (!ViewData.ModelState.IsValid)
{
    <div style="color: red; border: 1px solid red; padding: 10px;">
        <h3>Errores en el formulario:</h3>
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}


}
    <!--  -------------------------------------  -->
    <!--  -----------Modal Renovación ---------  -->
    <!--  -------------------------------------  -->
    <div class="modal fade" id="modalRenovacion" tabindex="-1" aria-labelledby="modalRenovacionLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 500px;">
            <!-- Cambié el tamaño aquí -->
            <div class="modal-content">
                <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()" />

                <div class="modal-header">
                    <h5 class="modal-title" id="modalRenovacionLabel">Renovación de Contrato</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <!-- DNI Propietario y Nombre Propietario -->
                    <div class="row align-items-end mb-3 g-2">
                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">DNI Propietario</label>
                            <input type="text" class="form-control form-control-sm" id="dniPropietarioRenovacion" style="width: 150px;">
                        </div>
                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">Nombre Propietario</label>
                            <input type="text" class="form-control form-control-sm" id="nombrePropietarioRenovacion" style="width: 300px;">
                        </div>
                    </div>

                    <!-- DNI Inquilino y Nombre Inquilino -->
                    <div class="row align-items-end mb-3 g-2">
                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">DNI Inquilino</label>
                            <input type="text" class="form-control form-control-sm" id="dniInquilinoRenovacion" style="width: 150px;">
                        </div>
                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">Nombre Inquilino</label>
                            <input type="text" class="form-control form-control-sm" id="nombreInquilinoRenovacion" style="width: 300px;">
                        </div>
                    </div>
                    <!-- Dirección -->
                    <div class="row align-items-end mb-3 g-2">
                        <div class="col-12 d-flex flex-column">
                            <label class="form-label">Dirección</label>
                            <input type="text" class="form-control form-control-sm" id="direccionRenovacion" readonly>
                        </div>
                    </div>
                    <!-- Nueva Fecha Inicio, Fecha Final y Monto -->
                    <div class="row align-items-end mb-3 g-2">
                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">Nueva Fecha Inicio</label>
                            <input type="date" class="form-control form-control-sm" id="nuevaFechaInicio" style="width: 150px;">
                        </div>

                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">Nueva Fecha Final</label>
                            <input type="date" class="form-control form-control-sm" id="nuevaFechaFinal" style="width: 150px;">
                        </div>
                        <div class="col-auto d-flex flex-column">
                            <label class="form-label">Nuevo Monto</label>
                            <input type="number" class="form-control form-control-sm" id="nuevoMonto" style="width: 100px;" step="0.01">
                        </div>
                    </div>
                    <!-- Campo oculto para IdInmueble -->
                    <input type="hidden" id="idInmuebleRenovacion">
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button type="submit" class="btn btn-success" id="btnGuardarRenovacion">Crear Renovación</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>

            </div>
        </div>
    </div>

   <!-- CIERRA el formulario principal -->
   <!-- -------------------------------------  Acá empieza el PAGOS, ya fuera del form principal---------------- -->
  <div id="divPagos" class="fixed-right">
    <div class="card" style="width: 680px;">
        <div class="card-header">
            <h5 class="card-title">Pagos</h5>
        </div>
        <div class="card-body">
            <!-- Detalles del pago -->
            <div id="detalle-pago"></div>

          <!-- Formulario de pago -->
<form id="formularioPagos" onsubmit="crearPago(event)" novalidate>
    <input type="hidden" id="idContrato" name="idContrato" value="@Model.IdContrato" />

   <!--------------  Mostrar al usuario logueado --------->
    <div class="mb-3 d-none">
    <label for="pagadoPor" class="form-label mb-1" style="font-size: 0.75rem;">Pagado por:</label>
    <input type="text" id="pagadoPor" name="pagadoPor" class="form-control" style="font-size: 0.75rem;" value="@ViewBag.NombreyApellido" readonly />
</div>


    <div class="d-flex gap-2 mb-2">
        <div>
            <label for="nuevoNroPago" class="form-label mb-1" style="font-size: 0.75rem;">N° Pago</label>
            <input type="number" id="nuevoNroPago" name="nuevoNroPago" class="form-control" style="width: 120px; font-size: 0.75rem;" required>
        </div>
        <div>
            <label for="nuevoFecha" class="form-label mb-1" style="font-size: 0.75rem;">Fecha</label>
            <input type="date" id="nuevoFecha" name="nuevoFecha" class="form-control" style="width: 120px; font-size: 0.75rem;" required>
        </div>
        <div>
            <label for="nuevoImporte" class="form-label mb-1" style="font-size: 0.75rem;">Importe</label>
            <input type="number" step="0.01" id="nuevoImporte" name="nuevoImporte" class="form-control" style="width: 120px; font-size: 0.75rem;" required>
        </div>
        <div>
            <label for="estadoPago" class="form-label mb-1" style="font-size: 0.75rem;">Estado</label>
            <select id="estadoPago" name="estadoPago" class="form-control" style="width: 80px; font-size: 0.75rem;">
                <option value="Pagado">Pagado</option>
                <option value="Pendiente">Pendiente</option>
                <option value="Anulado">Anulado</option>
            </select>
        </div>
    </div>

    <div class="mb-3">
        <label for="nuevoDetalle" class="form-label mb-1" style="font-size: 0.75rem;">Detalle</label>
        <div class="d-flex" style="gap: 8px;">
            <input type="text" id="nuevoDetalle" name="nuevoDetalle" class="form-control" style="font-size: 0.75rem;">
            <button type="submit" class="btn btn-success btn-sm">Agregar</button>
        </div>
    </div>
</form>

<!-- EstA ES la TABLA DE LOS PAGOS  -->
   <div id="contenedorTabla">
    @if (ViewBag.Pagos != null && ((List<proyectoInmobiliariaNuevo.Models.Pago>)ViewBag.Pagos).Count > 0)
    {
       <table class="table table-striped mt-4">
    <thead class="table-success text-black">
        <tr>
            <th class="text-center" onclick="ordenarPor('NroPago')" id="headerNroPago">N° Pago</th>
            <th onclick="ordenarPor('Fecha')" id="headerFecha">Fecha</th>
            <th class="text-end" onclick="ordenarPor('Importe')" id="headerImporte">Importe</th>
            <th onclick="ordenarPor('Detalle')" id="headerDetalle">Detalle</th>
            <th onclick="ordenarPor('Estado')" id="headerEstado">Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
 <tbody id="tablaPagos">
    @foreach (var pago in (List<proyectoInmobiliariaNuevo.Models.Pago>)ViewBag.Pagos)
    {
        bool esAnulado = pago.Estado == "Anulado";
        <tr id="fila-pago-@pago.IdPago">
            <td class="text-center">@pago.NroPago</td>
            <td>@pago.FechaPago.ToString("dd-MM-yyyy")</td>
            <td class="text-end">@pago.Importe</td>
            <td>@pago.Detalle</td>
            <td class="estado">@pago.Estado</td>
           
            <td>
                <button class="btn btn-sm btn-primary me-1" onclick="editarPago(@pago.IdPago)" data-id="@pago.IdPago" @(esAnulado ? "disabled" : "")>Editar</button>
                <button class="btn btn-sm btn-danger eliminar-btn" onclick="eliminarPago(@pago.IdPago)" @(esAnulado ? "disabled" : "")>Eliminar</button>
                <button class="btn btn-sm btn-info ver-detalles"
        onclick="verPago(@pago.IdPago, '@pago.Estado', @pago.Importe, '@pago.FechaPago.ToString("yyyy-MM-dd")', '@pago.PagadoPor'); actualizarTablaPagos();">
    Ver Detalle
</button>
            </td>
        </tr>
    }
</tbody>

</table>
    }
    else
    {
        <p>No hay pagos aún para este contrato</p>
    }
</div>


        </div> <!-- cierre de card-body -->
    </div> <!-- cierre de card -->
</div> <!-- cierre de divPagos -->


<!-- Modal de detalle de pagos-->
<div class="modal fade" id="modalDetalles" tabindex="-1" aria-labelledby="modalDetallesLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDetallesLabel">Detalles del Pago</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Aquí se llenará el contenido dinámicamente con JS -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>


<!------------------------------------------- Script  ------------------------------------------------> 
 
 <script>





function verPago(id, estado, importe, fechaPago, pagadoPor) {
    const modalBody = document.getElementById('modalBody');

    // Convertir la fecha al formato dd/mm/yyyy
    const fecha = new Date(fechaPago);
    const fechaFormateada = fecha.toLocaleDateString('es-AR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });

    // Formatear el importe con dos decimales y símbolo de pesos
    const importeFormateado = `$${importe.toFixed(2)}`;

    // Generar contenido dinámico dependiendo del estado
    const contenido = `
        <div class="mb-2">
            <strong>${estado === "Pagado" ? "Pago cobrado por" : "Pago anulado por"}:</strong>
            <span>${pagadoPor}</span>
        </div>
        <div class="mb-2">
            <strong>Fecha de Pago:</strong>
            <span>${fechaFormateada}</span>
        </div>
        <div class="mb-2">
            <strong>Importe:</strong>
            <span class="text-success">${importeFormateado}</span>
        </div>
    `;

    modalBody.innerHTML = contenido;

    // Mostrar el modal
    const modal = new bootstrap.Modal(document.getElementById('modalDetalles'));
    modal.show();
}




let ordenAscendente = true;  // Empezamos en orden ascendente

function ordenarPor(columna) {
    const tabla = document.getElementById('tablaPagos');
    const filas = Array.from(tabla.getElementsByTagName('tr')).slice(1); // Excluimos el encabezado

    // Determinamos la dirección del orden
    const columnaIndex = {
        'NroPago': 0,
        'Fecha': 1,
        'Importe': 2,
        'Detalle': 3,
        'Estado': 4
    }[columna];

    // Ordenamos las filas dependiendo de la columna
    filas.sort((a, b) => {
        const celdaA = a.cells[columnaIndex].textContent.trim();
        const celdaB = b.cells[columnaIndex].textContent.trim();

        // Si la columna es "Fecha", comparamos como fechas
        if (columna === 'Fecha') {
            const fechaA = new Date(celdaA);
            const fechaB = new Date(celdaB);
            return ordenAscendente ? fechaA - fechaB : fechaB - fechaA;
        }

        // Si la columna es "Importe", comparamos como números
        if (columna === 'Importe') {
            const importeA = parseFloat(celdaA.replace('$', '').replace(',', ''));
            const importeB = parseFloat(celdaB.replace('$', '').replace(',', ''));
            return ordenAscendente ? importeA - importeB : importeB - importeA;
        }

        // Para las demás columnas, comparamos como cadenas
        return ordenAscendente ? celdaA.localeCompare(celdaB) : celdaB.localeCompare(celdaA);
    });

    // Vaciamos la tabla y agregamos las filas ordenadas
    filas.forEach(fila => tabla.appendChild(fila));

    // Alternamos el estado de la ordenación
    ordenAscendente = !ordenAscendente;

    // Actualizamos los iconos o clases de orden en los encabezados
    actualizarIconosOrden(columna, ordenAscendente);
}

// Función para actualizar los iconos de orden en los encabezados
function actualizarIconosOrden(columna, ascendente) {
    const headers = document.querySelectorAll('th');
    headers.forEach(header => {
        if (header.textContent.trim() === columna) {
            if (ascendente) {
                header.classList.add('ascendente');
                header.classList.remove('descendente');
            } else {
                header.classList.add('descendente');
                header.classList.remove('ascendente');
            }
        } else {
            header.classList.remove('ascendente', 'descendente');
        }
    });
}


   function abrirModalRenovacion(btn) {
            const dniPropietario = btn.dataset.dniPropietario || "No disponible";
            const nombrePropietario = btn.dataset.nombrePropietario || "No disponible";
            const dniInquilino = btn.dataset.dniInquilino || "No disponible";
            const nombreInquilino = btn.dataset.nombreInquilino || "No disponible";
            const fechaInicio = btn.dataset.fechaInicio || "No disponible";
            const fechaFinal = btn.dataset.fechaFinal || "No disponible";
            const monto = btn.dataset.monto || "0";
            const direccion = btn.dataset.direccion || "No disponible";
            const idInmueble = btn.dataset.idInmueble || "No disponible";

            // Imprimir los valores antes de que se envíen
            console.log("Datos que se enviarán al servidor:");
            console.log("DNI Propietario:", dniPropietario);
            console.log("Nombre Propietario:", nombrePropietario);
            console.log("DNI Inquilino:", dniInquilino);
            console.log("Nombre Inquilino:", nombreInquilino);
            console.log("Fecha Inicio:", fechaInicio);
            console.log("Fecha Final:", fechaFinal);
            console.log("Monto:", monto);
            console.log("Dirección:", direccion);
            console.log("ID Inmueble:", idInmueble);

            // Asignar los valores a los inputs
            document.getElementById("dniPropietarioRenovacion").value = dniPropietario;
            document.getElementById("nombrePropietarioRenovacion").value = nombrePropietario;
            document.getElementById("dniInquilinoRenovacion").value = dniInquilino;
            document.getElementById("nombreInquilinoRenovacion").value = nombreInquilino;
            document.getElementById("nuevaFechaInicio").value = fechaInicio;
            document.getElementById("nuevaFechaFinal").value = fechaFinal;
            document.getElementById("nuevoMonto").value = monto;
            document.getElementById("direccionRenovacion").value = direccion;
            document.getElementById("idInmuebleRenovacion").value = idInmueble;

            // Mostrar el modal
            const modal = new bootstrap.Modal(document.getElementById("modalRenovacion"));
            modal.show();
        }

        // Escuchar clic en el botón Renovación
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('.btn-renovar').forEach(btn => {
                btn.addEventListener('click', function () {
                    abrirModalRenovacion(this);
                });
            });
        });



        document.getElementById("btnGuardarRenovacion").addEventListener("click", async function () {
            const idContratoAnterior = document.querySelector(".btn-renovar").dataset.idContrato;

            const nuevoContrato = {
                IdContratoAnterior: idContratoAnterior,
                DniPropietario: document.getElementById("dniPropietarioRenovacion").value,
                NombrePropietario: document.getElementById("nombrePropietarioRenovacion").value,
                DniInquilino: document.getElementById("dniInquilinoRenovacion").value,
                NombreInquilino: document.getElementById("nombreInquilinoRenovacion").value,
                FechaInicio: document.getElementById("nuevaFechaInicio").value,
                FechaFinal: document.getElementById("nuevaFechaFinal").value,
                Monto: document.getElementById("nuevoMonto").value,
                IdInmueble: document.querySelector(".btn-renovar").dataset.idInmueble,
                Direccion: document.getElementById("direccionRenovacion").value,
                Vigente: true
            };

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const formData = new FormData();
                formData.append('DniPropietario', document.getElementById("dniPropietarioRenovacion").value);
                formData.append('NombrePropietario', document.getElementById("nombrePropietarioRenovacion").value);
                formData.append('DniInquilino', document.getElementById("dniInquilinoRenovacion").value);
                formData.append('NombreInquilino', document.getElementById("nombreInquilinoRenovacion").value);
                formData.append('FechaInicio', document.getElementById("nuevaFechaInicio").value);
                formData.append('FechaFinal', document.getElementById("nuevaFechaFinal").value);
                formData.append('Monto', document.getElementById("nuevoMonto").value);
                formData.append('IdInmueble', document.querySelector(".btn-renovar").dataset.idInmueble);
                formData.append('Direccion', document.getElementById("direccionRenovacion").value);
                formData.append('Vigente', true);  // Este es un valor fijo según lo que mencionaste, podrías ponerlo como variable si se necesita.
                formData.append('__RequestVerificationToken', token);

                const response = await fetch('/Contratos/CrearRenovacion', {
                    method: 'POST',
                    body: formData // No necesitas agregar 'Content-Type', fetch lo maneja automáticamente cuando usas FormData
                });

                if (response.ok) {
                    alert("Contrato renovado con éxito");
                    location.reload();
                } else {
                    const errorResponse = await response.text();
                    console.error("Error al renovar el contrato:", errorResponse);
                    alert("Hubo un problema con la renovación");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Error al intentar renovar el contrato ");
            }
        });

//------------------------------------- FUNCIONES DE PAGOS -------------------

// FUNCIONES PRINCIPALES
document.addEventListener('DOMContentLoaded', function () {
    let idContrato = document.getElementById('idContrato').value;

    if (!idContrato) {
        console.error('idContrato no tiene un valor válido');
        return;
    }
});

async function cargarPagos(idContrato) {
    try {
        const response = await fetch(`/Contratos/GetByContrato/${idContrato}`);
        if (!response.ok) {
            throw new Error('Error al obtener los pagos');
        }

        const data = await response.json();
        
        if (!data.success) {
            console.error("Error en la respuesta:", data.message);
            return;
        }

        const pagos = data.pagos;
        pagos.sort((a, b) => a.nroPago - b.nroPago);

        const tablaPagos = document.getElementById('tablaPagos');
        tablaPagos.innerHTML = '';

        pagos.forEach(pago => {
            const esAnulado = pago.estado === 'Anulado'; // Suponiendo que 'Anulado' es el estado para deshabilitar botones

  const fila = document.createElement('tr');
fila.id = `fila-pago-${pago.idPago}`;
fila.innerHTML = `
    <td class="text-center">${pago.nroPago}</td>
    <td>${new Date(pago.fechaPago).toLocaleDateString()}</td>
    <td class="text-end">$${pago.importe.toFixed(2)}</td>
    <td>${pago.detalle || ''}</td>
    <td class="estado">${pago.estado}</td>
    <td>
        <button class="btn btn-sm btn-primary me-1" 
            onclick="editarPago(${pago.idPago})"
            data-id="${pago.idPago}"
            ${esAnulado ? "disabled" : ""}>
            Editar
        </button>
        <button class="btn btn-sm btn-danger eliminar-btn"
            onclick="eliminarPago(${pago.idPago})"
            ${esAnulado ? "disabled" : ""}>
            Eliminar
        </button>
        <button class="btn btn-sm btn-info"
            onclick="verPago(${pago.idPago}, '${pago.estado}', ${pago.importe}, '${pago.fechaPago}', '${pago.pagadoPor}')">
            Ver Detalle
        </button>
    </td>
`;

tablaPagos.appendChild(fila);

        });
    } catch (error) {
        console.error("Error al cargar pagos:", error);
    }
}


function mostrarPagos(pagos) {
    const pagosContainer = document.getElementById('pagosContainer');
    pagosContainer.innerHTML = ""; // Limpiar antes de agregar nuevos
    pagos.forEach(pago => {
        const pagoElemento = document.createElement('div');
        pagoElemento.textContent = `Pago #${pago.NroPago}, Importe: ${pago.Importe}, Estado: ${pago.Estado}`;
        pagosContainer.appendChild(pagoElemento);
    });
}

async function crearPago(event) {
    event.preventDefault();

    if (!document.getElementById("idContrato").value || 
        !document.getElementById("nuevoNroPago").value || 
        !document.getElementById("nuevoFecha").value || 
        !document.getElementById("nuevoImporte").value || 
        !document.getElementById("estadoPago").value) {
        alert("Por favor complete todos los campos.");
        return;
    }

    const nuevoPago = {
        IdContrato: document.getElementById("idContrato").value,
        NroPago: document.getElementById("nuevoNroPago").value,
        FechaPago: document.getElementById("nuevoFecha").value,
        Importe: document.getElementById("nuevoImporte").value,
        Detalle: document.getElementById("nuevoDetalle").value,
        Estado: document.getElementById("estadoPago").value,
        pagadoPor: document.getElementById("pagadoPor").value
    };

    console.log("Voy a enviarlos:", nuevoPago);

    try {
        const response = await fetch('/Contratos/AgregarPago', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(nuevoPago)
        });

        if (!response.ok) {
            throw new Error("Error en la respuesta del servidor");
        }

        const data = await response.json();
        console.log("Respuesta del servidor:", data);

        if (data.success) {
            alert("Pago agregado exitosamente");

            // ✨ Vaciar los campos
            document.getElementById("nuevoNroPago").value = "";
            document.getElementById("nuevoFecha").value = "";
            document.getElementById("nuevoImporte").value = "";
            document.getElementById("nuevoDetalle").value = "";
            document.getElementById("estadoPago").value = "";

            // ✨ Refrescar la tabla de pagos
            cargarPagos(nuevoPago.IdContrato);

        } else {
            console.error("Error al agregar el pago:", data.message);
            alert("Ocurrió un error al agregar el pago.");
        }
    } catch (error) {
        console.error("Error en la solicitud:", error);
        alert("Error inesperado al conectar con el servidor.");
    }
}

//var nombreyApellido = '@ViewBag.NombreyApellido';
const nombreyApellido = '@ViewBag.NombreyApellido';

//------------------------------------------------------------------------------------
//-------------------------------------   ELIMINAR PAGO ------------------------------
//------------------------------------------------------------------------------------
   function eliminarPago(idPago) {
    console.log("ID que se envía:", idPago);
    console.log("Usuario que se envía:", nombreyApellido);
 console.log("Anulando el pago:", idPago, "- Pagado por:", nombreyApellido);

    if (confirm("¿Estás seguro que querés anular este pago?")) {
        fetch('/Contratos/AnularPago', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            
            body: JSON.stringify({
                IdPago: idPago,
                PagadoPor: nombreyApellido
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("No se encontró la ruta");
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                const fila = document.querySelector(`#fila-pago-${idPago}`);
                if (fila) {
                    const botones = fila.querySelectorAll("button:not(.ver-detalles)");
                    botones.forEach(btn => {
                        btn.disabled = true;
                        btn.classList.add("btn-secondary");
                        btn.classList.remove("btn-primary", "btn-danger");
                    });

                    const estadoCelda = fila.querySelector(".estado");
                    if (estadoCelda) estadoCelda.innerText = "Anulado";
                    location.reload();
                }

                alert("Pago anulado exitosamente ");
            } else {
                alert("No se pudo anular: " + (data.message ?? 'Error desconocido'));
            }
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Ups, hubo un error ");
        });
    }
}

//--------------------------------------------------------------------------------

function editarPago(idPago) {
    const boton = document.querySelector(`button[data-id="${idPago}"]`);
    if (!boton) {
        alert("No se encontró el botón para editar ");
        return;
    }
    const fila = boton.closest('tr');
    const detalleCell = fila.querySelector('td:nth-child(4)');

    const detalleText = detalleCell.innerText;
    detalleCell.innerHTML = `<input type="text" class="form-control" value="${detalleText}">`;

    boton.innerText = 'Guardar';
    boton.setAttribute('onclick', `guardarPago(${idPago})`);
}

function guardarPago(idPago) {
    let fila = document.querySelector(`button[data-id="${idPago}"]`).closest('tr');
    let detalleInput = fila.querySelector('td:nth-child(4) input');
    let nuevoDetalle = detalleInput.value;

    console.log('ID del pago enviado:', idPago); // Verifica si el idPago es correcto

    fetch('/Pagos/ActualizarDetalle', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ idPago: idPago, detalle: nuevoDetalle })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            fila.querySelector('td:nth-child(4)').innerText = nuevoDetalle;
            let botonGuardar = fila.querySelector('button');
            botonGuardar.innerText = 'Editar';
            botonGuardar.setAttribute('onclick', `editarPago(${idPago})`);
        } else {
            alert('Hubo un problema al actualizar el detalle.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Ups, algo falló al guardar el detalle.');
    });
}


function actualizarPago(idPago, nuevoEstado, nuevoPagadoPor) {
    console.log("Actualizando el pago:", idPago);

    // Enviar solicitud al servidor para actualizar el pago
    fetch(`/Contratos/ActualizarPago`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            IdPago: idPago,
            Estado: nuevoEstado,
            PagadoPor: nuevoPagadoPor
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("Pago actualizado correctamente");

            // Actualizar la fila de la tabla con los nuevos valores
            const fila = document.querySelector(`#fila-pago-${idPago}`);
            if (fila) {
                const estadoCelda = fila.querySelector(".estado");
                const pagadoPorCelda = fila.querySelector(".pagado-por");

                if (estadoCelda) estadoCelda.innerText = nuevoEstado;
                if (pagadoPorCelda) pagadoPorCelda.innerText = nuevoPagadoPor;

                // Opcional: Inhabilitar los botones de editar y eliminar si es necesario
                fila.querySelector(".editar-btn").disabled = true;
                fila.querySelector(".eliminar-btn").disabled = true;

                // Aquí llamamos a la función para actualizar el modal
                actualizarModalDetalles(idPago, nuevoEstado, nuevoPagadoPor);
            }

            alert("Pago actualizado exitosamente");
        } else {
            alert("Error al actualizar el pago: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error al actualizar el pago:", error);
        alert("Hubo un problema al actualizar el pago.");
    });
}


function actualizarModalDetalles(idPago, nuevoEstado, nuevoPagadoPor) {
    // Si ya tienes un modal abierto, actualiza los valores de los campos correspondientes
    const modalEstado = document.querySelector("#modalEstado");
    const modalPagadoPor = document.querySelector("#modalPagadoPor");

    if (modalEstado) modalEstado.innerText = nuevoEstado;
    if (modalPagadoPor) modalPagadoPor.innerText = nuevoPagadoPor;

    // Si tienes otros campos en el modal, actualízalos de manera similar
}


// ORDENAMIENTO DE TABLA
function inicializarOrdenamiento() {
    const tabla = document.querySelector("table");
    if (!tabla) return;

    const headers = tabla.querySelectorAll("th");
    let ordenAscendente = true;

    headers.forEach((header, indice) => {
        header.addEventListener("click", () => {
            ordenarTabla(indice);
            ordenAscendente = !ordenAscendente;
        });
    });

    function ordenarTabla(columna) {
        const tbody = tabla.querySelector("tbody");
        const filas = Array.from(tbody.querySelectorAll("tr"));

        filas.sort((a, b) => {
            let celdaA = a.children[columna].innerText.trim();
            let celdaB = b.children[columna].innerText.trim();

            let valorA = isNaN(celdaA) ? celdaA.toLowerCase() : parseFloat(celdaA);
            let valorB = isNaN(celdaB) ? celdaB.toLowerCase() : parseFloat(celdaB);

            if (valorA < valorB) return ordenAscendente ? -1 : 1;
            if (valorA > valorB) return ordenAscendente ? 1 : -1;
            return 0;
        });

        tbody.innerHTML = '';
        filas.forEach(fila => tbody.appendChild(fila));
    }
} 


</script>




</body>  
