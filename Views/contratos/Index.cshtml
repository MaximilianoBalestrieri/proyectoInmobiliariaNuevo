@using Microsoft.AspNetCore.Http
@using System.Web
@model List<proyectoInmobiliariaNuevo.Models.Contrato>
@{
    ViewData["Title"] = "Contratos";
    string rol = ViewBag.Rol as string;
    string UsuarioPagos = ViewBag.Apellido as string;
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<style>
    thead {
        background-color: black;
        color: white;
    }

    table {
        padding: 10px;
        border-collapse: separate;
        border-spacing: 0;
        border-radius: 5px;
        overflow: hidden;
    }

    thead tr:first-child th:first-child {
        border-top-left-radius: 5px;
    }

    thead tr:first-child th:last-child {
        border-top-right-radius: 5px;
    }

    /* Reducir la altura de las filas */
    th, td {
        padding: 5px 10px; /* Ajusta el padding vertical y horizontal */
        font-size: 14px; /* Opcional: Reduce el tamaño de la fuente */
    }

    tr {
        height: 30px; /* Ajusta la altura mínima de las filas */
    }
</style>

<body>
 <h2>Contratos</h2>
 <p>Usuario Logueado: @ViewBag.NombreyApellido</p> 
<a href="@Url.Action("Create", "Contratos")" class="btn btn-primary mb-3">Agregar Contrato</a>




@if (ViewBag.Mensaje != null)
{
    <div class="alert alert-info">@ViewBag.Mensaje</div>
}

<!-- <input type="text" id="buscadorContratos" class="form-control mb-3" placeholder="Buscar contratos..."> -->

<table class="table table-striped">
    <div class="row mb-3">
        <div class="col-md-3">
            <label for="fechaInicioContrato">Desde:</label>
            <input type="date" id="fechaInicioContrato" class="form-control" />
        </div>
        <div class="col-md-3">
            <label for="fechaFinContrato">Hasta:</label>
            <input type="date" id="fechaFinContrato" class="form-control" />
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-primary" onclick="buscarContratos()">Buscar Contratos</button>
        </div>
    </div>

    <div class="filtro-dias-contrato rounded p-3" style="border: 1px solid #ccc; position: absolute; top: 80px; right: 110px; background-color: #f8f9fa;">
        <h5 style="text-align: center; background-color: black; color: white; padding: 5px; border-radius: 10px;">
            Filtro por días de vencimiento
        </h5>
        <div style="text-align: center;">
            <label><input type="radio" name="diasFiltro" class="radio-dias" value="30"> Menos de 30 días</label><br>
            <label><input type="radio" name="diasFiltro" class="radio-dias" value="60"> Menos de 60 días</label><br>
            <label><input type="radio" name="diasFiltro" class="radio-dias" value="90"> Menos de 90 días</label>
            <div style="text-align: center; margin-top: 10px;">
                <button id="mostrarTodosBtn" class="btn btn-secondary">Mostrar todos</button>
            </div>
        </div>
    </div>


    @if (Model != null && Model.Count > 0)
    {
       <input type="text" id="buscador" class="form-control mt-3 mb-3" placeholder="Buscar en la tabla..." style="width: 400px;">


        <table class="table table-striped" >

    <thead class="table-dark">
        <tr>
            <th onclick="ordenarContratos(0)">#</th>
            <th onclick="ordenarContratos(1)">Propietario</th>
            <th onclick="ordenarContratos(2)">Inquilino</th>
            <th onclick="ordenarContratos(3)">Inicio</th>
            <th onclick="ordenarContratos(4)">Final</th>
            <th onclick="ordenarContratos(5)">Monto</th>
            <th onclick="ordenarContratos(6)">Dirección</th>
            <th onclick="ordenarContratos(7)">Vigente</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody id="tablaContratos">
    @foreach (var contrato in Model)
    {
      <tr class="fila-contrato" data-fecha-final="@contrato.FechaFinal.ToString("yyyy-MM-dd")">
        <td>@contrato.IdContrato</td>
        <td>@contrato.NombrePropietario</td>
        <td>@contrato.NombreInquilino</td>
        <td>@contrato.FechaInicio.ToShortDateString()</td>
        <td>@contrato.FechaFinal.ToShortDateString()</td>
        <td>$@contrato.Monto</td>
        <td>@contrato.Direccion</td>
        <td>@(contrato.Vigente ? "Sí" : "No")</td>
       <td class="text-nowrap">
    <a href="@Url.Action("Edit", "Contratos", new { id = contrato.IdContrato })"
       class="btn btn-warning btn-sm px-2 py-0 me-1"
       style="font-size: 0.75rem;"
       title="Editar">
        <i class="bi bi-pencil-square"></i>
    </a>

    @if (rol == "Administrador")
    {
        <a href="@Url.Action("Delete", "Contratos", new { id = contrato.IdContrato })"
           class="btn btn-danger btn-sm px-2 py-0 me-1"
           style="font-size: 0.75rem;"
           title="Eliminar">
            <i class="bi bi-trash"></i>
        </a>
    }
    else
    {
        <button class="btn btn-danger btn-sm px-2 py-0 me-1"
                style="font-size: 0.75rem;" disabled
                title="Eliminar">
            <i class="bi bi-trash"></i>
        </button>
    }

    <button type="button"
            class="btn btn-info btn-sm px-2 py-0"
            style="font-size: 0.75rem;"
            title="Ver contrato"
            onclick="verContrato('@Html.Raw(HttpUtility.JavaScriptStringEncode(contrato.RealizadoPor))')">
        <i class="bi bi-eye"></i>
    </button>
</td>

      </tr>




   }

    </tbody>
</table>

        <div id="paginacion" class="d-flex justify-content-between mt-3">
            <button id="prevPagina" class="btn btn-secondary">Anterior</button>
            <span id="numPagina"></span>
            <button id="nextPagina" class="btn btn-secondary">Siguiente</button>
        </div>
    }
    else
    {
        <p>No hay contratos disponibles para mostrar.</p>
    }

<div class="modal fade" id="modalDetalles" tabindex="-1" aria-labelledby="modalDetallesLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border border-primary shadow">
      <div class="modal-header bg-info text-white">
        <h5 class="modal-title fw-bold" id="modalDetallesLabel">Información del contrato</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body" id="modalBody">
        <!-- El contenido se llena con JavaScript -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>


    <script>
   function verContrato(realizadoPor) {
    console.log("Valor recibido:", realizadoPor); // ← probá esto
    const modalBody = document.getElementById('modalBody');
    const contenido = `
        <div class="mb-2">
            <strong>Contrato creado por:</strong>
            <span>${realizadoPor}</span>
        </div>
    `;
    modalBody.innerHTML = contenido;

    const modal = new bootstrap.Modal(document.getElementById('modalDetalles'));
    modal.show();
}


   function formatearFecha(fechaString) {
    if (!fechaString) return "No disponible";

    const fecha = new Date(fechaString);

    if (isNaN(fecha.getTime())) {
        return "No disponible";
    }

    const dia = fecha.getDate().toString().padStart(2, '0');
    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');
    const anio = fecha.getFullYear();

    return `${dia}/${mes}/${anio}`;
}


        document.addEventListener("DOMContentLoaded", function () {
            const radios = document.querySelectorAll('.radio-dias');
            const mostrarTodosBtn = document.getElementById('mostrarTodosBtn');

            radios.forEach(radio => {
                radio.addEventListener('change', function () {
                    const valor = parseInt(this.value);
                    const hoy = new Date();

                    document.querySelectorAll('.fila-contrato').forEach(fila => {
                        const fechaFinalStr = fila.getAttribute('data-fecha-final');
                        if (!fechaFinalStr) return;

                        const fechaFinal = new Date(fechaFinalStr);
                        const diferenciaMs = fechaFinal - hoy;
                        const diferenciaDias = Math.ceil(diferenciaMs / (1000 * 60 * 60 * 24));

                        let mostrar = false;

                        if (valor === 30 && diferenciaDias >= 0 && diferenciaDias <= 30) {
                            mostrar = true;
                        } else if (valor === 60 && diferenciaDias > 30 && diferenciaDias <= 60) {
                            mostrar = true;
                        } else if (valor === 90 && diferenciaDias > 60 && diferenciaDias <= 90) {
                            mostrar = true;
                        }

                        fila.style.display = mostrar ? '' : 'none';
                    });
                });
            });

            // Botón para mostrar todos los contratos
            mostrarTodosBtn.addEventListener('click', function () {
                document.querySelectorAll('.fila-contrato').forEach(fila => {
                    fila.style.display = '';
                });

                // Desmarcar todos los radios
                radios.forEach(r => r.checked = false);
            });
        });

        function buscarInmueblesVacios() {
            const fechaInicio = document.getElementById('fechaInicioContrato').value;
            const fechaFin = document.getElementById('fechaFinContrato').value;

            if (fechaFin < fechaInicio) {
                alert("La fecha 'Hasta' no puede ser menor que la fecha 'Desde'");
                return;
            }

            if (!fechaInicio || !fechaFin) {
                alert("Por favor, selecciona ambas fechas.");
                return;
            }

            const url = `/Contratos/InmueblesVacios?desde=${fechaInicio}&hasta=${fechaFin}`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    console.log("Inmuebles vacíos:", data);
                    actualizarTablaInmuebles(data); // Usamos una tabla distinta si querés separar
                })
                .catch(error => {
                    console.error("Error al buscar inmuebles vacíos:", error);
                });
        }


 function buscarContratos() {
    const fechaInicio = document.getElementById('fechaInicioContrato').value;
    const fechaFin = document.getElementById('fechaFinContrato').value;



    if (fechaFin && fechaInicio && fechaFin < fechaInicio) {
        alert("La fecha 'Hasta' no puede ser menor que la fecha 'Desde'");
        return;
    }

    if (fechaInicio && fechaFin) {
        const url = `/Contratos/BuscarContratos?desde=${fechaInicio}&hasta=${fechaFin}`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Error en la respuesta del servidor");
                }
                return response.json();
            })
            .then(data => {
                console.log("Contratos filtrados:", data);

                // Verificamos si hay contratos
                if (data && Array.isArray(data)) {
                    data.forEach(c => {
                        // Asegurándonos de que los datos son válidos
                       console.log(`FechaInicio: ${c.fechaInicio ? c.fechaInicio : 'No disponible'}, FechaFinal: ${c.fechaFinal ? c.fechaFinal : 'No disponible'}`);

                    });

                    if (data.error) {
                        alert(data.error); // Si hubo un error, lo mostramos
                    } else if (data.mensaje) {
                        // Si no hay contratos, mostramos el mensaje de "sin resultados"
                        actualizarTablaContratos([]);
                        mostrarMensajeSinContratos(data.mensaje);
                    } else {
                        // Si hay contratos, los mostramos en la tabla
                        actualizarTablaContratos(data);
                    }
                } else {
                    alert("No se encontraron contratos.");
                }
            })
            .catch(error => {
                console.error("Error al obtener contratos:", error);
                alert("Ocurrió un error al buscar los contratos.");
            });
    } else {
        alert("Por favor, seleccioná ambas fechas.");
    }
}



function mostrarMensajeSinContratos(mensaje) {
    const tbody = document.querySelector("#tablaContratos tbody");
    tbody.innerHTML = "";  // Limpiamos la tabla para mostrar el mensaje

    const fila = `
        <tr>
            <td colspan="8" style="text-align: center; color: red;">
                ${mensaje}
            </td>
        </tr>
    `;
    tbody.innerHTML = fila;
}


       
      function actualizarTablaContratos(contratos) {
    const tbody = document.querySelector("#tablaContratos tbody");

    if (!tbody) {
        console.error("No se encontró la tabla de contratos.");
        return;
    }

    // Verificamos si vino un error
    if (contratos.error) {
        alert("Error desde el servidor: " + contratos.error);
        return;
    }

    tbody.innerHTML = "";

    contratos.forEach(contrato => {
        const fila = `
            <tr>
                <td>${contrato.idContrato}</td>
                <td>${contrato.nombrePropietario || ''}</td>
                <td>${contrato.nombreInquilino || ''}</td>
                <td>${contrato.direccion || ''}</td>
                <td>${contrato.fechaInicio ? formatearFecha(contrato.fechaInicio) : ''}</td>
                <td>${contrato.fechaFinal ? formatearFecha(contrato.fechaFinal) : ''}</td>
                <td>${contrato.monto || ''}</td>
                <td>
                    <a href="/Contratos/Edit/${contrato.idContrato}" class="btn btn-warning btn-sm">Editar</a>
                    <a href="/Contratos/Delete/${contrato.idContrato}" class="btn btn-danger btn-sm">Eliminar</a>
                </td>
            </tr>
        `;
        tbody.innerHTML += fila;
    });
}




        document.addEventListener("DOMContentLoaded", function () {
            // Búsqueda

            function actualizarTablaContratos(contratos) {
                const tablaContratos = document.getElementById('tablaContratos');
                tablaContratos.innerHTML = '';  // Limpiamos la tabla actual

                contratos.forEach(contrato => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                            <td>${contrato.dniPropietario}</td>
                            <td>${contrato.dniInquilino}</td>
                            <td>${new Date(contrato.fechaInicio).toLocaleDateString()}</td>
                            <td>${new Date(contrato.fechaFinal).toLocaleDateString()}</td>
                            <td>${contrato.inmueble.calle}</td>
                            <td><a href="/Contratos/Edit/${contrato.idContrato}" class="btn btn-warning btn-sm">Editar</a> <a href="/Contratos/Delete/${contrato.idContrato}" class="btn btn-danger btn-sm">Eliminar</a></td>
                        `;
                    tablaContratos.appendChild(row);
                });
            }



  document.getElementById("buscador").addEventListener("keyup", function () {
    var valor = this.value.toLowerCase();
    var filas = document.querySelectorAll("#tablaContratos tr");

    filas.forEach(function (fila) {
        var textoFila = Array.from(fila.querySelectorAll("td:not(:last-child)"))
                             .map(td => td.innerText.toLowerCase())
                             .join(" ");
        fila.style.display = textoFila.includes(valor) ? "" : "none";
    });
});


            // Paginación
           const filas = Array.from(document.querySelectorAll("#tablaContratos tr"));

            const filasPorPagina = 5;
            let paginaActual = 1;

            function mostrarPagina() {
                const inicio = (paginaActual - 1) * filasPorPagina;
                const fin = inicio + filasPorPagina;

                filas.forEach((fila, i) => {
                    fila.style.display = (i >= inicio && i < fin) ? "" : "none";
                });

                document.getElementById("numPagina").innerText = `Página ${paginaActual} de ${Math.ceil(filas.length / filasPorPagina)}`;
            }

            document.getElementById("prevPagina").addEventListener("click", function () {
                if (paginaActual > 1) {
                    paginaActual--;
                    mostrarPagina();
                }
            });

            document.getElementById("nextPagina").addEventListener("click", function () {
                if (paginaActual < Math.ceil(filas.length / filasPorPagina)) {
                    paginaActual++;
                    mostrarPagina();
                }
            });

            mostrarPagina();
        });

        function ordenarTabla(n) {
            var tabla = document.querySelector(".table tbody");
            var filas = Array.from(tabla.rows);
            var ordenAscendente = tabla.getAttribute("data-orden") !== "asc";

            filas.sort(function (filaA, filaB) {
                var celdaA = filaA.cells[n].innerText.trim().toLowerCase();
                var celdaB = filaB.cells[n].innerText.trim().toLowerCase();

                if (!isNaN(celdaA) && !isNaN(celdaB)) {
                    return ordenAscendente ? celdaA - celdaB : celdaB - celdaA;
                }

                return ordenAscendente ? celdaA.localeCompare(celdaB) : celdaB.localeCompare(celdaA);
            });

            tabla.innerHTML = "";
            filas.forEach(fila => tabla.appendChild(fila));

            tabla.setAttribute("data-orden", ordenAscendente ? "asc" : "desc");
        }
    </script>
</body>


